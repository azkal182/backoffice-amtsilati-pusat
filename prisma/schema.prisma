// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       Int    @id @default(autoincrement())
    username String @unique
    password String

    role RoleUser? @default(USER)
}

enum RoleUser {
    ADMIN
    USER
}

model Poster {
    id          Int      @id @default(autoincrement())
    description String?
    url         String
    path        String?
    created_at  DateTime @default(now())
    publish     Boolean  @default(true)
}

model Store {
    id              Int      @id @default(autoincrement())
    title           String
    description     String
    firstPublished  DateTime @default(now())
    maximumPurchase Int
    pageTotal       Int
    isbn            String?
    width           Int
    height          Int
    price           Float
    cover           String
    created_at      DateTime @default(now())
}

model Event {
    id            Int      @id @default(autoincrement())
    name          String
    startDate     DateTime // Tanggal awal Gregorian (Masehi)
    isHijri       Boolean // Apakah event diinput berdasarkan kalender Hijriyah?
    isCutiBersama Boolean  @default(false) // Apakah ini termasuk cuti bersama?
    calculateAge  Boolean  @default(false)
    showYear      Boolean  @default(false)

    // frequency     Frequency @relation(fields: [frequencyId], references: [id])
    // frequencyId   Int
    frequency FrequencyType
    category  Category
    duration  Int? // Durasi event dalam hari (null jika tidak ditentukan)
    endDate   DateTime? // Tanggal akhir Gregorian (null jika tidak ditentukan)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

// model Frequency {
//     id               Int           @id @default(autoincrement())
//     type             FrequencyType
//     interval         Int?          @default(1)
//     dayOfWeek        DayOfWeek?
//     weekOfMonth      Int?
//     monthOfYear      Int?
//     monthOfHijriYear Int?
//     createdAt        DateTime      @default(now())
//     updatedAt        DateTime      @updatedAt

//     events Event[]
// }

enum FrequencyType {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
    HIJRI_MONTHLY
    HIJRI_YEARLY
}

// enum DayOfWeek {
//     SUNDAY
//     MONDAY
//     TUESDAY
//     WEDNESDAY
//     THURSDAY
//     FRIDAY
//     SATURDAY
// }

enum Category {
    HARI_LIBUR_NASIONAL
    HARI_BESAR_ISLAM
    HARI_BESAR_PPDF
    HARI_SUNNAH
}

model PriceSyahriyah {
    id            Int       @id @default(autoincrement())
    priceAtHijri  String
    priceAtMasehi DateTime?
    priceFull     Int
    priceDisc     Int

    updatedAt DateTime? @updatedAt
}

model Pengurus {
    id     Int      @id @default(autoincrement())
    nis    String   @unique
    name   String
    active Boolean? @default(true)

    pengurusHistory PengurusStatusHistory[]
}

model PengurusStatusHistory {
    id             Int           @id @default(autoincrement())
    pengurusId     Int
    pengurus       Pengurus      @relation(fields: [pengurusId], references: [id])
    categoryPrice  CatgoryPrice? @default(FULL)
    startFormHijri String
    startMasehiAt  DateTime?
    updatedAt      DateTime?     @updatedAt
}

enum CatgoryPrice {
    FULL
    DISC
    FREE
}

model Province {
    id   Int    @id @default(autoincrement())
    name String
    code String

    regencies Regency[]
}

model Regency {
    id        Int        @id @default(autoincrement())
    name      String
    label     String?
    type      String?
    code      String
    fullCode  String
    districts District[]

    provinceId Int
    province   Province @relation(fields: [provinceId], references: [id])
}

model District {
    id       Int       @id @default(autoincrement())
    name     String
    code     String
    fullCode String
    villages Village[]

    regencyId Int
    regency   Regency @relation(fields: [regencyId], references: [id])
}

model Village {
    id         Int    @id @default(autoincrement())
    name       String
    code       String
    fullCode   String
    postalCode String

    districtId Int
    district   District @relation(fields: [districtId], references: [id])
}
